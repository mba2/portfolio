/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$css3-logo-name: 'css3_logo';
$css3-logo-x: 514px;
$css3-logo-y: 197px;
$css3-logo-offset-x: -514px;
$css3-logo-offset-y: -197px;
$css3-logo-width: 142px;
$css3-logo-height: 200px;
$css3-logo-total-width: 709px;
$css3-logo-total-height: 512px;
$css3-logo-image: '../img/test.png';
$css3-logo: (514px, 197px, -514px, -197px, 142px, 200px, 709px, 512px, '../img/test.png', 'css3_logo', );
$html5-logo-name: 'html5_logo';
$html5-logo-x: 0px;
$html5-logo-y: 0px;
$html5-logo-offset-x: 0px;
$html5-logo-offset-y: 0px;
$html5-logo-width: 512px;
$html5-logo-height: 512px;
$html5-logo-total-width: 709px;
$html5-logo-total-height: 512px;
$html5-logo-image: '../img/test.png';
$html5-logo: (0px, 0px, 0px, 0px, 512px, 512px, 709px, 512px, '../img/test.png', 'html5_logo', );
$js-logo-name: 'js_logo';
$js-logo-x: 514px;
$js-logo-y: 0px;
$js-logo-offset-x: -514px;
$js-logo-offset-y: 0px;
$js-logo-width: 195px;
$js-logo-height: 195px;
$js-logo-total-width: 709px;
$js-logo-total-height: 512px;
$js-logo-image: '../img/test.png';
$js-logo: (514px, 0px, -514px, 0px, 195px, 195px, 709px, 512px, '../img/test.png', 'js_logo', );
$spritesheet-width: 709px;
$spritesheet-height: 512px;
$spritesheet-image: '../img/test.png';
$spritesheet-sprites: ($css3-logo, $html5-logo, $js-logo, );
$spritesheet: (709px, 512px, '../img/test.png', $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
